; AUTOGENERATED FILE - DO NOT EDIT
{# you can edit this file, of course - the above notice is for template output -#}
; Copyright (c) 2022 Kalyan Sriram <coder.kalyan@gmail.com>
;
; {{ peripheral.name }} peripheral register map assembly header for {{ device.name }}
; Generated on {{ now() | date(format="%Y-%m-%d %H:%M:%S") }}

; REGISTER DEFINITIONS
{% for r in peripheral.registers -%}
{%- if r is containing("register") -%}
{%- set register = r.register -%}
{%- set address = peripheral.base_address + register.address_offset -%}
{%- set rname = register.name | upper %}
; Register:    {{ rname | upper }}
; Description: {{ register | get(key="description", default="N/A") }}
.equ           {{ rname }}       = {{ address | fmthex }}
{% if register is containing("properties") -%}
{%- if register.properties is containing("access") -%}
; Access:      {{ register.properties.access }}
{% endif -%} {#- if register.properties is containing("access") -#}
{%- if register.properties is containing("access") -%}
.equ           {{ rname }}_RESET = {{ register.properties.reset | fmthex }}
{% endif -%} {#- if register.properties is containing("reset") -#}
{% endif -%} {#- if register is containing("properties") -#}
{%- if register is containing("fields") -%}
{%- for field in register.fields -%}
{%- set fname = field.name | upper -%}
; Field:       {{ fname | upper }}
; Description: {{ field | get(key="description", default="N/A") }}
.equ           {{ rname }}_{{ fname }}_MASK = {{ field.bit_range | mask | fmthex }}
{%- if field.bit_range | lsb == field.bit_range | msb %}
.equ           {{ rname }}_{{ fname }}_BIT  = {{ field.bit_range | lsb }}
{% else %}
.equ           {{ rname }}_{{ fname }}_LSB  = {{ field.bit_range | lsb }}
.equ           {{ rname }}_{{ fname }}_MSB  = {{ field.bit_range | msb }}
{% if field is containing("enumerated_values") and field.enumerated_values | length > 0 -%}
; Enum values
{% set ev = field.enumerated_values[0] -%}
{%- if ev is containing("values") %}
{%- for enum in field.enumerated_values[0].values -%}
.equ           {{ rname }}_{{ fname }}_VALUE_{{ enum.name | upper }} = {{ enum.value }} {% if enum is containing("description") %} ; {{ enum.description }} {% endif %}
{% endfor -%} {#- for enum in field.enumerated_values -#}
{% else %}
{#- TODO: evaluate derived values -#}
{% endif -%} {#- if ev is containing("values") -#}
{% endif -%} {#- if field is containing("enumerated_values") -#}
{% endif %} {#- if field.bit_range | lsb == field.bit_range | msb #}
{% endfor -%} {#- for field in register.fields -#}
{%- endif -%} {#- if register is containing("fields") -#}
{%- endif -%} {#- if r is containing("register") -#}
{%- endfor -%} {#- for r in peripheral.registers -#}

{#- TODO: nonexistant right now, remove? -#}
{%- if peripheral is containing("interrupts") and peripheral.interrupts | length > 0 -%}
; INTERRUPT DEFINITIONS
{%- for interrupt in peripheral.interrupts %}
{%- set iname = interrupt.name -%}
; Interrupt:   {{ iname }}
; Description: {{ interrupt | get(key="description", default="N/A") }}
.equ           {{ iname }}_INTERRUPT_NUM {{ interrupt.value }}
{% endfor -%} {#- for interrupt in peripheral.interrupts -#}
{%- endif -%} {#- if peripheral is containing("interrupts") and peripheral.interrupts | length > 0 -#}
